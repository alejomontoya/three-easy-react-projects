{"version":3,"sources":["Components/header.js","Components/counter.js","Components/letterCounter.js","Components/changeBackground.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Counter","useState","count","setCount","onClick","LetterCounter","onChange","e","target","value","length","ChangeBackground","document","documentElement","style","setProperty","color","i","Math","floor","random","getRandomColor","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qXAIe,SAASA,IACpB,OACI,oCACI,4BAAQC,UAAU,UACd,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,YAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,sBAAT,sBAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,mBAAT,uB,iBCdb,SAASC,IAAW,IAAD,EACJC,mBAAS,GADL,mBACvBC,EADuB,KAChBC,EADgB,KAE9B,OACI,oCACI,wBAAIL,UAAU,SAAd,WACA,yBAAKA,UAAU,WACX,wBAAIA,UAAU,mBAAmBI,GACjC,6BAASJ,UAAU,qBACf,4BAAQA,UAAU,mBAAmBM,QAAS,kBAAMD,EAASD,EAAQ,KACjE,uBAAGJ,UAAU,kBAEjB,4BAAQA,UAAU,mBAAmBM,QAAS,kBAAMD,EAASD,EAAQ,KACjE,uBAAGJ,UAAU,oB,MCZtB,SAASO,IAAiB,IAAD,EACVJ,mBAAS,GADC,mBAC7BC,EAD6B,KACtBC,EADsB,KAEpC,OACI,oCACI,wBAAIL,UAAU,SAAd,UAA6B,6BAA7B,SACA,yBAAKA,UAAU,SACX,2BAAOA,UAAU,eAAeQ,SAAU,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOC,MAAMC,WACzE,0BAAMZ,UAAU,iBAAhB,iBAA+CI,K,MCPhD,SAASS,IAcpB,OACI,oCACA,wBAAIb,UAAU,SAAd,cAAiC,6BAAjC,kBACA,4BAAQA,UAAU,iBAAiBM,QAPnB,WAChBQ,SAASC,gBAAgBC,MACxBC,YAAY,eAVM,WAGnB,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,EAIsBK,MAK7B,sBCYOC,MAnBf,WACI,OACE,kBAAC,IAAD,KACE,kBAACzB,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0B,KAAK,sBACV,kBAACZ,EAAD,OAEF,kBAAC,IAAD,CAAOY,KAAK,mBACV,kBAAClB,EAAD,OAEF,kBAAC,IAAD,CAAOkB,KAAK,KACV,kBAACvB,EAAD,UCbQwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c342066.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './header.css'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <>\r\n            <header className=\"header\">\r\n                <nav>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/\">Counter</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/change-background\">Change background</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/letter-counter\">Letter Counter</Link>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport './counter.css'\r\n\r\nexport default function Counter() {\r\n    const [count, setCount] = useState(0);\r\n    return (\r\n        <>\r\n            <h1 className=\"title\">Counter</h1>\r\n            <div className=\"counter\">\r\n                <h1 className=\"counter___count\">{count}</h1>\r\n                <section className=\"counter___section\">\r\n                    <button className=\"counter___button\" onClick={() => setCount(count - 1)}>\r\n                        <i className=\"fas fa-minus\"></i>\r\n                    </button>\r\n                    <button className=\"counter___button\" onClick={() => setCount(count + 1)}>\r\n                        <i className=\"fas fa-plus\"></i>\r\n                    </button>\r\n                </section>\r\n            </div>\r\n        </>\r\n    );\r\n}","import React, { useState } from 'react'\r\nimport './letterCounter.css'\r\n\r\nexport default function LetterCounter() {\r\n    const [count, setCount] = useState(0);\r\n    return (\r\n        <>\r\n            <h1 className=\"title\">Letter <br></br>Count</h1>  \r\n            <div className=\"count\">\r\n                <input className=\"input__count\" onChange={(e) => setCount(e.target.value.length)}/>\r\n                <span className=\"letter__count\">Letter Count: {count}</span>\r\n            </div>  \r\n        </>\r\n    );\r\n}","import React from 'react'\r\nimport './changeBackground.css'\r\n\r\nexport default function ChangeBackground() {\r\n\r\n    const getRandomColor = () => {\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n          color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n    const changeColor = () => {\r\n        document.documentElement.style\r\n        .setProperty('--background', getRandomColor());\r\n    }\r\n    return (\r\n        <>\r\n        <h1 className=\"title\">Background <br></br> color changer</h1>\r\n        <button className=\"button__change\" onClick={changeColor}>CHANGE BACKGROUND</button>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\n\r\nimport Header from './Components/header'\r\nimport Counter  from './Components/counter'\r\nimport LetterCounter  from './Components/letterCounter' \r\nimport ChangeBackground from './Components/changeBackground'\r\n\r\nfunction App() {\r\n    return (\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route path=\"/change-background\">\r\n            <ChangeBackground />\r\n          </Route>\r\n          <Route path=\"/letter-counter\">\r\n            <LetterCounter />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Counter />\r\n          </Route>\r\n        </Switch>\r\n    </Router>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}